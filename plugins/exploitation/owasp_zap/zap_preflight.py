# plugins/exploitation/owasp_zap/zap_preflight.py
from __future__ import annotations
import socket
import subprocess
import shutil
import time


def port_open(host: str, port: int, timeout=0.5) -> bool:
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.settimeout(timeout)
        return s.connect_ex((host, port)) == 0


def find_free_port(start=8080, limit=50, host="127.0.0.1"):
    p = start
    for _ in range(limit):
        if not port_open(host, p):
            return p
        p += 1
    return start


def ensure_zap_daemon(host="127.0.0.1", port=8080, api_key=None, headless=True):
    if port_open(host, port):
        return {"ok": True, "host": host, "port": port, "started": False}

    zap_sh = shutil.which("zap.sh") or shutil.which("zap.bat")
    if not zap_sh:
        return {
            "ok": False,
            "hint": "ZAP not found on PATH. Install OWASP ZAP or add to PATH.",
        }

    port = find_free_port(port)
    args = [
        zap_sh,
        "-daemon",
        f"-port {port}",
        "-host 127.0.0.1",
        "-config api.addrs.addr.name=127.0.0.1",
        "-config api.addrs.addr.regex=false",
    ]
    if api_key:
        args += [f"-config api.key={api_key}"]
    if headless:
        args += ["-silent"]

    # Launch
    try:
        subprocess.Popen(" ".join(args), shell=True)
        for _ in range(60):
            if port_open(host, port, 0.5):
                return {"ok": True, "host": host, "port": port, "started": True}
            time.sleep(0.5)
        return {
            "ok": False,
            "hint": f"ZAP did not become ready on {host}:{port} within 30s.",
        }
    except Exception as e:
        return {"ok": False, "hint": f"Failed to start ZAP: {e}"}
