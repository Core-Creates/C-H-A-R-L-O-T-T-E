# ******************************************************************************************
# agents/exploit_agent.py
# Generates proof-of-concept (PoC) templates for exploitable vulnerabilities
# Based on triaged findings from CHARLOTTE with predicted exploitability
# ******************************************************************************************

import os
import json
from datetime import datetime

# ==========================================================================================
# FUNCTION: load_triaged_findings()
# ==========================================================================================
def load_triaged_findings(file_path="data/triaged_findings.json"):
    if not os.path.exists(file_path):
        print(f"[!] Triaged findings not found: {file_path}")
        return []
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        print(f"[!] Error loading triaged findings: {e}")
        return []

# ==========================================================================================
# FUNCTION: generate_poc_template()
# Generates a basic exploit PoC template
# ==========================================================================================
def generate_poc_template(vuln):
    cve_id = vuln.get("id", "UNKNOWN")
    impact = vuln.get("impact", "N/A")
    cwe = vuln.get("cwe", "N/A")
    prediction = vuln.get("exploit_prediction", "Unknown")
    confidence = vuln.get("confidence", "N/A")
    score = vuln.get("score", "N/A")

    template = f"""# ==========================================
# PoC Template for {cve_id}
# ==========================================
# CWE: {cwe}
# Impact: {impact}
# Exploitability: {prediction} ({confidence})
# Severity Score: {score}
# Generated: {datetime.utcnow().isoformat()}Z
# ==========================================

def exploit():
    print("This is a placeholder PoC for {cve_id}.")
    print("You should replace this logic with the actual exploit steps.")
    # TODO: Insert real exploit logic

if __name__ == "__main__":
    exploit()
"""
    return template

# ==========================================================================================
# FUNCTION: save_poc_file()
# ==========================================================================================
def save_poc_file(cve_id, content, output_dir="reports/pocs"):
    os.makedirs(output_dir, exist_ok=True)
    filename = os.path.join(output_dir, f"{cve_id.replace(':', '_')}.py")
    with open(filename, "w", encoding="utf-8") as f:
        f.write(content)
    print(f"[+] PoC saved: {filename}")

# ==========================================================================================
# FUNCTION: run_exploit_agent()
# ==========================================================================================
def run_exploit_agent():
    findings = load_triaged_findings()

    if not findings:
        print("[!] No triaged findings available.")
        return

    for vuln in findings:
        if vuln.get("exploit_prediction") in ["Exploit Likely", "Exploit Possible"]:
            cve_id = vuln.get("id", "UNKNOWN")
            template = generate_poc_template(vuln)
            save_poc_file(cve_id, template)

    print("[*] PoC generation complete.")

# ==========================================================================================
# MAIN EXECUTION BLOCK
# ==========================================================================================
if __name__ == "__main__":
    run_exploit_agent()
# This script generates proof-of-concept (PoC) templates for vulnerabilities
# that have been triaged and predicted to be exploitable. It reads from a JSON file 