# ******************************************************************************************
# agents/triage_agent.py
# Handles triage of vulnerabilities using rule-based scoring and classification.
# Supports optional Markdown and PDF report generation.
# Depends on core/logic_modules/triage_rules.py
# ******************************************************************************************

import os
import json
import markdown2
from InquirerPy import inquirer
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from core.logic_modules.triage_rules import triage
from core.logic_modules.exploit_predictor import predict_exploitability

# ==========================================================================================
# FUNCTION: load_findings()
# Loads vulnerability scan results from a local JSON file
# ==========================================================================================
def load_findings(file_path):
    """
    Load vulnerability scan data from a JSON file.

    --------------------------------------------
    Expected structure:
    --------------------------------------------
    [
        {
            "id": "CVE-2023-1234",
            "cvss": 8.1,
            "exploit_available": true,
            "asset_value": 4,
            "impact": "RCE",
            "cwe": "CWE-119: Buffer Overflow"
        },
        ...
    ]
    """
    if not os.path.exists(file_path):
        print(f"[!] Scan file not found: {file_path}")
        return []

    if not file_path.lower().endswith(".json"):
        print(f"[!] Invalid file type. Please provide a .json file.")
        return []

    try:
        with open(file_path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        print(f"[!] Failed to parse JSON: {e}")
        return []

# ==========================================================================================
# FUNCTION: triage_findings()
# Applies scoring logic to all findings using triage() from triage_rules.py
# Appends calculated 'severity', 'score', and 'priority' to each vuln entry
# ==========================================================================================
def triage_findings(findings):
    """
    Apply triage scoring and classification to a list of findings.

    --------------------------------------------
    Output structure:
    --------------------------------------------
    [
        {
            ...original fields...,
            "severity": "High",
            "score": 82,
            "priority": "üö® High"
        },
        ...
    ]
    """
    enriched = []
    for vuln in findings:
        result = triage(vuln)
        vuln.update(result)
        prediction = predict_exploitability(vuln)
        vuln.update(prediction)
        enriched.append(vuln)
    return enriched

# ==========================================================================================
# FUNCTION: display_summary()
# CLI summary of top N triaged findings
# ==========================================================================================
def display_summary(findings, limit=10):
    sorted_findings = sorted(findings, key=lambda f: f["score"], reverse=True)
    print("\n===== üß† TRIAGE RESULTS (Top {0}) =====".format(limit))
    for vuln in sorted_findings[:limit]:
        print(f"- {vuln.get('id', 'N/A')}: {vuln['priority']} | {vuln['severity']} | Score: {vuln['score']}")
        print(f"  CWE: {vuln.get('cwe', 'N/A')} | Impact: {vuln.get('impact', 'N/A')} | Exploit: {vuln.get('exploit_prediction')} ({vuln.get('confidence')})")
        print()

# ==========================================================================================
# FUNCTION: save_results()
# Writes enriched/triaged findings to an output file for downstream use
# ==========================================================================================
def save_results(findings, output_file="data/triaged_findings.json"):
    os.makedirs(os.path.dirname(output_file), exist_ok=True)
    with open(output_file, "w", encoding="utf-8") as f:
        json.dump(findings, f, indent=4)
    print(f"[+] Triaged results saved to {output_file}")

# ==========================================================================================
# FUNCTION: generate_markdown_report()
# ==========================================================================================
def generate_markdown_report(findings, output_file="reports/triage_report.md"):
    os.makedirs(os.path.dirname(output_file), exist_ok=True)
    sorted_findings = sorted(findings, key=lambda f: f["score"], reverse=True)

    severity_counts = {"Critical": 0, "High": 0, "Medium": 0, "Low": 0}
    for f in sorted_findings:
        severity = f.get("severity", "Unknown")
        if severity in severity_counts:
            severity_counts[severity] += 1

    lines = ["# üß† CHARLOTTE Vulnerability Triage Report\n"]
    lines.append("## üìä Summary by Severity")
    lines.append("| Severity | Count |")
    lines.append("|----------|-------|")
    for level in ["Critical", "High", "Medium", "Low"]:
        lines.append(f"| {level} | {severity_counts[level]} |")
    lines.append("\n---\n")

    lines.append("## üî• Critical Exploitable Vulnerabilities")
    for vuln in sorted_findings:
        if vuln.get("severity") == "Critical" and vuln.get("exploit_prediction") == "Exploit Likely":
            cve_id = vuln.get('id', 'Unknown ID')
            link = f"https://nvd.nist.gov/vuln/detail/{cve_id}" if cve_id.startswith("CVE-") else None
            lines.append(f"- [{cve_id}]({link}) ‚Üí {vuln['impact']} | Score: {vuln['score']} | {vuln['confidence']}")
    lines.append("\n---\n")

    for vuln in sorted_findings:
        cve_id = vuln.get('id', 'Unknown ID')
        cve_link = f"https://nvd.nist.gov/vuln/detail/{cve_id}" if cve_id.startswith("CVE-") else None
        lines.append(f"## [{cve_id}]({cve_link})" if cve_link else f"## {cve_id}")
        lines.append(f"- **Priority**: {vuln['priority']}")
        lines.append(f"- **Severity**: {vuln['severity']}")
        lines.append(f"- **Score**: {vuln['score']}")
        lines.append(f"- **CWE**: {vuln.get('cwe', 'N/A')}")
        lines.append(f"- **Impact**: {vuln.get('impact', 'N/A')}")
        lines.append(f"- **Exploitability**: {vuln.get('exploit_prediction')} ({vuln.get('confidence')})")
        lines.append("\n---\n")

    with open(output_file, "w", encoding="utf-8") as f:
        f.write("\n".join(lines))

    print(f"[+] Markdown report saved to {output_file}")
    return output_file

# ==========================================================================================
# FUNCTION: generate_pdf_report()
# ==========================================================================================
def generate_pdf_report(findings, output_file="reports/triage_report.pdf"):
    os.makedirs(os.path.dirname(output_file), exist_ok=True)
    c = canvas.Canvas(output_file, pagesize=letter)
    width, height = letter
    text = c.beginText(40, height - 50)
    text.setFont("Helvetica-Bold", 14)
    text.textLine("üß† CHARLOTTE Vulnerability Triage Report")
    text.setFont("Helvetica", 12)
    text.textLine("")

    sorted_findings = sorted(findings, key=lambda f: f["score"], reverse=True)
    severity_counts = {"Critical": 0, "High": 0, "Medium": 0, "Low": 0}
    for f in sorted_findings:
        severity = f.get("severity", "Unknown")
        if severity in severity_counts:
            severity_counts[severity] += 1

    text.textLine("üìä Summary by Severity:")
    for level in ["Critical", "High", "Medium", "Low"]:
        text.textLine(f"  {level}: {severity_counts[level]}")
    text.textLine("-" * 70)

    for vuln in sorted_findings:
        severity = vuln.get("severity", "").lower()
        exploit_likely = vuln.get("exploit_prediction", "") == "Exploit Likely"
        is_critical = severity == "critical"

        if is_critical and exploit_likely:
            c.setFillColor(colors.red)
            text.setFont("Helvetica-Bold", 12)
        else:
            c.setFillColor(colors.black)
            text.setFont("Helvetica", 12)

        cve_id = vuln.get('id', 'Unknown ID')
        text.textLine(f"\nID: {cve_id}")
        if cve_id.startswith("CVE-"):
            text.textLine(f"Link: https://nvd.nist.gov/vuln/detail/{cve_id}")

        text.textLine(f"  Priority: {vuln.get('priority')} | Severity: {vuln.get('severity')} | Score: {vuln.get('score')}")
        text.textLine(f"  CWE: {vuln.get('cwe', 'N/A')} | Impact: {vuln.get('impact', 'N/A')}")
        text.textLine(f"  Exploitability: {vuln.get('exploit_prediction')} ({vuln.get('confidence')})")
        text.textLine("-" * 70)

    c.drawText(text)
    c.save()
    print(f"[+] PDF report saved to {output_file}")
    return output_file

# ==========================================================================================
# FUNCTION: run_triage_agent()
# ==========================================================================================
def run_triage_agent(scan_file="data/findings.json"):
    print(f"[*] Loading scan findings from: {scan_file}")
    findings = load_findings(scan_file)

    if not findings:
        print("[!] No findings to triage. Exiting.")
        return

    print("[*] Running triage logic with exploit prediction...")
    enriched_findings = triage_findings(findings)

    display_summary(enriched_findings)
    save_results(enriched_findings)

    format_choice = inquirer.select(
        message="Select report output format:",
        choices=["üìÑ Markdown (.md)", "üßæ PDF (.pdf)", "‚ùå Skip report"]
    ).execute()

    if format_choice.startswith("üìÑ"):
        generate_markdown_report(enriched_findings)
    elif format_choice.startswith("üßæ"):
        generate_pdf_report(enriched_findings)
    else:
        print("[*] Skipped report generation.")

# ==========================================================================================
# MAIN EXECUTION BLOCK
# ==========================================================================================
if __name__ == "__main__":
    run_triage_agent()
# This block allows the script to be run directly from the command line.
# It will execute the triage agent with the default scan file.
# This allows the script to be run directly for testing or standalone triage
# purposes, without needing to go through the main CLI flow.
# It can also be imported as a module in other scripts.
# This modular design allows for easy integration into larger workflows.
